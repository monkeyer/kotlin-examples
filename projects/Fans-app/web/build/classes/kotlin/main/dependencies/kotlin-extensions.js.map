{"version":3,"file":"kotlin-extensions.js","sources":["kotlinext/js/CommonJS.kt","kotlinext/js/Function.kt","kotlinext/js/Helpers.kt","util/Standard.kt","kotlinext/js/Object.kt"],"sourcesContent":[null,null,null,"@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R = block()\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R = block()\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R = receiver.block()\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T { block(); return this }\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T { block(this); return this }\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R = block(this)\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? = if (predicate(this)) this else null\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? = if (!predicate(this)) this else null\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    for (index in 0..times - 1) {\n        action(index)\n    }\n}",null],"names":[],"mappings":";;;;;;IAMqD,iBAAY,QAAZ,C;EAAA,C;;ICKV,kB;EAAA,C;;IAIvC,iBAAY,GAAZ,C;EAAA,C;;IAIA,iBAAY,IAAZ,EAAkB,IAAlB,C;EAAA,C;;IAIA,iBAAY,IAAZ,EAAkB,IAAlB,EAAwB,IAAxB,C;EAAA,C;yFCrBJ,yB;IAAA,0B;MACI,UAAa,E;MAET,QADG,GACH,C;MADJ,OAAO,G;IAGX,C;GALA,C;6EAOA,yB;IAAA,0B;MANI,UAAa,E;MAM8C,OAJvD,CADG,GACH,C;MAI8C,OAL3C,G;IAK2C,C;GAAtD,C;;IANI,YAAa,E;IAQY,gDAPlB,KAOkB,EAAuB,GAAvB,C;EAAA,C;qFAC7B,yB;IAAA,wC;IAAA,+B;MAAuE,gBAAX,MAAM,GAAN,C;MAAiB,OCoCrB,W;MDpCI,OCoCY,S;IDpCZ,C;GAA5D,C;;IATI,YAAa,E;IAYM,gB;IAAA,OAAP,MAAO,U;IAAnB,kD;MAAY,UAAZ,Y;MACI,YAAY,IAAgB,GAAhB,C;MACZ,IAAI,aAAJ,C;QAbG,KAagB,CAAK,GAAL,IAAY,K;;IAHA,OAV5B,K;EAU4B,C;;IEKhB,Q;IAAA,yE;EAAA,C;;;;;;;;;;;;;;;;;;"}